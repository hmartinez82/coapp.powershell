// Implicity loaded template script for ptk

commands {
	choices: { build, clean };
};

configurations {
    Toolset {
        key : "PlatformToolset";
        choices: {v142, v141, v140, v120, v110, v100, v90, v80, v71, v70, v60, gcc, v110_xp, v110_wp80 };
		// Explicitly Not including pivot variants:  "WindowsKernelModeDriver8.0", "WindowsApplicationForDrivers8.0", "WindowsUserModeDriver8.0"

		// We're normalizing out the concept of the v110 platform -- Overloading the $(PlatformToolset) variable for additional pivots was a dumb idea.
		v110.condition = "( $(PlatformToolset.IndexOf('v110')) > -1 Or '$(PlatformToolset)' == 'WindowsKernelModeDriver8.0' Or '$(PlatformToolset)' == 'WindowsApplicationForDrivers8.0' Or '$(PlatformToolset)' == 'WindowsUserModeDriver8.0' )";
    };

    Platform {
        key : "Platform";
        choices: { Win32, x64, ARM, ARM64, AnyCPU };
        Win32.aliases : { x86, win32, ia32, 386 };
        x64.aliases : { x64, amd64, em64t, intel64, x86-64, x86_64 };
        ARM.aliases : { arm, woa };
        ARM64.aliases : { arm64 };
        AnyCPU.aliases : { anycpu, any };
    };

    Configuration {
        key : "Configuration";
        choices: { Release, Debug };
    };

    Linkage {
        choices : { dynamic, static, ltcg, sxs };
        description = "Which version of the .lib file to link to this library";

        ltcg.description = "Link Time Compiler Generation";
        dynamic.description = "Dynamic Library (DLL)";
        static.description = "Static";
        sxs.description = "Side-by-Side";
    };

    // Only really applicable to x86
    CallingConvention {
        choices : { cdecl, stdcall, fastcall, thiscall, clrcall };
        description = "Calling convention model to use (for x86 only)";
        cdecl.description = "cdecl";
        stdcall.description = "stdcall (Uncommon)";
        fastcall.description = "fastcall (Rare)";
        thiscall.description = "thiscall (Rare)";
        clrcall.description = "clrcall (Rare)";

        stdcall.restricted-to = "Win32";
        fastcall.restricted-to = "Win32";
        thiscall.restricted-to = "Win32";
        clrcall.restricted-to = "Win32";
    };

	/*
		Since the MSBuild  property for identifying if a project is compiling a Win8 Store App
		is a boolean, and we don't want to actually key off that, we're going to generate
		a property that gets a value based on that boolean, and key off of that.

		We'll declare that property in the props file (so that it happens early in the MSBuild)
		(see the props section down near the bottom)
	*/

	TargetApplicationType {
		key: "TargetApplicationType";

		choices: { Desktop,  WinRT, Phone8, KernelModeDriver, ApplicationForDriver, UserModeDriver }; // "WindowsKernelModeDriver8.0", "WindowsApplicationForDrivers8.0", "WindowsUserModeDriver8.0"

		#defines {
			// we are going to define the conditions here
			// so that we can reuse them to detect 'desktop', since it's the absence
			// of all others, and I don't want to accidentally make a copy/paste error.

			KernelModeDriver_condition = "('$(PlatformToolset)' == 'WindowsKernelModeDriver8.0')";
			ApplicationForDriver_condition = "('$(PlatformToolset)' == 'WindowsApplicationForDrivers8.0')";
			UserModeDriver_condition = "('$(PlatformToolset)' == 'WindowsUserModeDriver8.0')";

			Phone8_condition = "('$(TargetPlatformIdentifier)' == 'Windows Phone' And '$(TargetPlatformVersion)' == '8.0')";
			WinRT_condition = "('$(AppContainerApplication)' == 'true')";
			Desktop_condition =  "( !${KernelModeDriver_condition} And !${ApplicationForDriver_condition} And !${UserModeDriver_condition} And !${Phone8_condition} And !${WinRT_condition} )";
		}

		Desktop.aliases : { Desktop, NotWinRT };
		WinRT.aliases : { WinRT, Metro, Modern };
		Phone8.aliases : { Phone8, Phone, WindowsPhone };

		KernelModeDriver.aliases : { KernelModeDriver, Kernel, KernelDriver ,Driver };
		ApplicationForDriver.aliases : { ApplicationForDriver };
		UserModeDriver.aliases  : { UserModeDriver, UserMode, UserDriver };

		KernelModeDriver.condition = ${KernelModeDriver_condition};
		ApplicationForDriver.condition = ${ApplicationForDriver_condition};
		UserModeDriver.condition = ${UserModeDriver_condition};

		Phone8.condition = ${Phone8_condition};
		WinRT.condition = ${WinRT_condition};
		Desktop.condition =  ${Desktop_condition};
	}
}

[Release | Debug]
toolinfo[Configuration] {
	// Very explict way of setting environment variables and msbuild properties
	[Release] {
		Environment {
			TARGET_CONFIGURATION = Release;
		}

		Properties {
			Configuration = Release;
		}
	}

	[Debug] {
		Environment {
			TARGET_CONFIGURATION = Debug;
		}

		Properties {
			Configuration = Debug;
		}
	}
}


[dynamic | static | ltcg | sxs]
toolinfo[Linkage] {
	// automatically assume that Linkage = parameter?
	Properties {
		Linkage = ${Linkage}; // is this how to do it?
	}
}

toolinfo[CallingConvention] {
	Properties {
		CallingConvention = ${CallingConvention};
	}
}